<?xml version="1.0"?>
<project name="basemodel" default="jar" basedir=".">
	
	<import file="../build.xml" />
	
	<property name="classes.dir" value="bin" />
	<property name="dist.dir" value="dist" />
	
	<path id="current-classpath">
		<fileset dir="dist">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<target name="clean">
		<delete dir="${classes.dir}" />
		<delete dir="${dist.dir}" />
	</target>
	
	<target name="init" depends="clean">
		<mkdir dir="${dist.dir}" />
	</target>
	
	<target name="jar" depends="init">
		<antcall target="jarbasemodel"></antcall>
	</target>
	
	<target name="compilebasemodel" description="compile basemodel source files">
		<property name="src.java.dir" value="src/base/main" />
		<property name="src.resource.dir" value="src/base/resources" />
		<delete dir="${classes.dir}" />
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${src.java.dir}" destdir="${classes.dir}" debug="true" encoding="GBK"
			fork="true"
			memoryInitialSize="64m"
			memoryMaximumSize="128m">
			<classpath refid="master-classpath" />
			<classpath refid="ref-classpath"/>
			<classpath refid="current-classpath"/>
		</javac>
		<copy todir="${classes.dir}/META-INF" overwrite="true">
			<fileset dir="${src.resource.dir}/META-INF">
				<include name="**/*.*" />
			</fileset>
		</copy>
	</target>
	
	<target name="jarbasemodel" depends="compilebasemodel" description="make basemodel.jar file">
		<property name="jar.name" value="basemodel.jar" /> 
		<jar destfile="${dist.dir}/${jar.name}" basedir="${classes.dir}" manifest="${classes.dir}/META-INF/MANIFEST.MF">
		</jar>
		<mkdir dir="${dist.dir}/client" />
		<copy todir="${dist.dir}/client" overwrite="true">
			<fileset dir="${dist.dir}">
				<include name="${jar.name}" />
			</fileset>
		</copy>
	</target>
	
	<target name="obfbasemodel">
			<property name="jar.name" value="basemodel.jar" /> 
			<mkdir dir="${dist.dir}/server" />
		  <taskdef resource="proguard/ant/task.properties"
           classpath="${lib.dir}/proguard.jar" />
      <proguard printmapping="out.map"
           renamesourcefileattribute="SourceFile">

          -injars  ${dist.dir}/${jar.name}"
    	    -outjars ${dist.dir}/server"

          -libraryjars ${lib.dir}
          -libraryjars ../${dist.dir}
          -libraryjars dist
          
	    <!-- Keep some useful attributes. -->
	    <keepattribute name="InnerClasses" />
	    <keepattribute name="SourceFile" />
	    <keepattribute name="LineNumberTable" />
	    <keepattribute name="Deprecated" />
	    <keepattribute name="*Annotation*" />
	
	    <!-- Preserve all public classes, and their public and protected fields and methods. -->
	    <keep access="public">
	      <field  access="public protected private" />
	      <method access="public protected" />
	    </keep>
	    	
	    <!-- Preserve all .class method names. -->
	    <keepclassmembernames access="public">
	      <method type      ="java.lang.Class"
	              name      ="class$"
	              parameters="java.lang.String" />
	      <method type      ="java.lang.Class"
	              name      ="class$"
	              parameters="java.lang.String,boolean" />
	    </keepclassmembernames>
	
	    <!-- Preserve all native method names and the names of their classes. -->
	    <keepclasseswithmembernames>
	      <method access="native" />
	    </keepclasseswithmembernames>
	    
	    <!-- Preserve the methods that are required in all enumeration classes. -->
	    <keepclassmembers extends="java.lang.Enum">
	      <method access="public static"
	              type="**[]"
	              name="values"
	              parameters="" />
	      <method access="public static"
	              type="**"
	              name="valueOf"
	              parameters="java.lang.String" />
	    </keepclassmembers>
	
	    <!-- Explicitly preserve all serialization members. The Serializable
	         interface is only a marker interface, so it wouldn't save them.
	         You can comment this out if your library doesn't use serialization.
	         If your code contains serializable classes that have to be backward
	         compatible, please refer to the manual. -->
	    <keepclassmembers implements="java.io.Serializable">
	      <field  access    ="final"
	              type      ="long"
	              name      ="serialVersionUID" />
	      <field  access    ="static final"
	              type      ="java.io.ObjectStreamField[]"
	              name      ="serialPersistentFields" />
	      <method access    ="private"
	              type      ="void"
	              name      ="writeObject"
	              parameters="java.io.ObjectOutputStream" />
	      <method access    ="private"
	              type      ="void"
	              name      ="readObject"
	              parameters="java.io.ObjectInputStream" />
	      <method type      ="java.lang.Object"
	              name      ="writeReplace"
	              parameters="" />
	      <method type      ="java.lang.Object"
	              name      ="readResolve"
	              parameters="" />
	    </keepclassmembers>
	    
	    </proguard>
	    <copy todir="${dist.dir}" overwrite="true">
					<fileset dir="${dist.dir}/server">
						<include name="${jar.name}" />
					</fileset>
			</copy>
			<delete dir="${dist.dir}/server" />
  </target>
  
</project>
